<?php

/**
*   ASG Assesment
*
*   A simple Contacts Manager application.
*
*   You should be able to add, update and remove a contact.
*   An alert message will be displayed indication the results
*   of the action.
*
*   @author Albert Nel
*/

/*
*   Include the autoload.php file as generated by composer
*   to load all dependencies.
*/
require __DIR__ . '/../vendor/autoload.php';

error_reporting(E_ALL);

/**
*   Initialize DB.
*/
DB::$user = 'root';
DB::$password = 'password';
DB::$dbName = 'asg';
DB::$error_handler = 'error_handler';

function error_handler($error)
{
    $e = new MeekroDBException($error['error'], $error['query'], $error['type']);
    throw $e;
}

/**
*   Initialize Twig templating engine.
*/
function loadTwig()
{
    // Initialize twig
    Twig_Autoloader::register();
    $loader = new Twig_Loader_Filesystem(__DIR__ . '/templates');
    $twig = new Twig_Environment($loader, array());

    return $twig;
}

/**
*   Parse the $_SERVER['QUERY_STRING'] variable.
*
*   @param string $query_string The query string
*   @return array The query string converted to a key/value array
*/
function parseQueryString($query_string)
{
    parse_str($query_string, $query_array);
    return $query_array;
}

/**
*   Handles the index page.
*
*   This function queries the DB for all contacts in alphabetical order.
*
*   It also handles an alert message to indicate whethere a contact was
*   saved successfully or not.
*
*   Finally it renders the Twig template.
*/
function indexHandler()
{
    $parse = [];

    // Query all contacts
    $parse['contacts'] = DB::query("SELECT * FROM contacts ORDER BY first_name, surname DESC");

    // Parse query string
    $query_array = parseQueryString($_SERVER['QUERY_STRING']);

    // Configure alert if necessarry
    if (array_key_exists('success', $query_array)) {
        if ($query_array['success'] == 1) {
            $alert['class'] = 'alert-success';
            $alert['headline'] = 'Success!';
            $alert['message'] = 'Contact saved successfully.';
        } else if ($query_array['success'] == 0) {
            $alert['class'] = 'alert-danger';
            $alert['headline'] = 'Error!';
            $alert['message'] = 'Contact could not be saved.';
        } else {
            $alert['class'] = 'hidden';
        }
    } else {
        $alert['class'] = 'hidden';
    }
    $parse['alert'] = $alert;

    // Render template
    $twig = loadTwig();
    echo $twig->render('contacts_list.html', $parse);
}

/**
*   Handles the adding and updating of contacts.
*/
function contactHandler()
{
    //var_dump($_FILES);
    $success = 0;

    // If $_POST, process first.
    if (!empty($_POST)) {
        // Start DB transaction for inserts and updates.
        DB::startTransaction();
        try {
            DB::insertUpdate('contacts123', array(
                'id' => $_POST['id'],
                'first_name' => $_POST['first_name'],
                'surname' => $_POST['surname'],
                'cellphone' => $_POST['cellphone'],
                'email' => $_POST['email']
            ));

            DB::commit();
            $success = 1;

        // Catch exception if something went wrong.
        } catch (Exception $e) {
            // Roll back transaction.
            DB::rollback();
        }

        header("Location: /?success=" . $success);
    }

    // Parse query string
    $query_array = [];
    if ($_SERVER['QUERY_STRING']) {
        $query_array = parseQueryString($_SERVER['QUERY_STRING']);
    }

    // Load normal view page.
    $parse = [];
    $twig = loadTwig();

    if (!empty($query_array['id'])) {
        $parse['contact'] = DB::queryFirstRow("SELECT * FROM contacts WHERE id = %d", $query_array['id']);
        $parse['submit_button_text'] = 'Update';
    } else {
        $parse['submit_button_text'] = 'Add';
    }

    echo $twig->render('contact_manage.html', $parse);
}

/**
*   Handles the deleting of a contact.
*/
function deleteContactHandler()
{
    // Parse query string
    $query_array = parseQueryString($_SERVER['QUERY_STRING']);

    // Delete contact
    try {
        DB::delete('contacts', "id=%d", $query_array['id']);
    } catch (MeekroDBException $e) {
        var_dump($e);
    }
}

/**
*   Handles the about page.
*/
function aboutHandler()
{
    $twig = loadTwig();
    echo $twig->render('about.html', array('the' => 'variables', 'go' => 'here'));
}

$dispatcher = \FastRoute\simpleDispatcher(function (\FastRoute\RouteCollector $r) {
    // Add routes
    $r->addRoute(['GET', 'POST'], '/', 'indexHandler');
    $r->addRoute(['GET', 'POST'], '/manage', 'contactHandler');
    $r->addRoute('DELETE', '/manage', 'deleteContactHandler');
    $r->addRoute('GET', '/about', 'aboutHandler');
});

// Fetch method and URI from somewhere
$httpMethod = $_SERVER['REQUEST_METHOD'];
$uri = $_SERVER['REQUEST_URI'];

// Strip query string (?foo=bar) and decode URI
if (false !== $pos = strpos($uri, '?')) {
    $uri = substr($uri, 0, $pos);
}
$uri = rawurldecode($uri);

$routeInfo = $dispatcher->dispatch($httpMethod, $uri);
switch ($routeInfo[0]) {
    case \FastRoute\Dispatcher::NOT_FOUND:
        // ... 404 Not Found
        break;
    case \FastRoute\Dispatcher::METHOD_NOT_ALLOWED:
        $allowedMethods = $routeInfo[1];
        // ... 405 Method Not Allowed
        break;
    case \FastRoute\Dispatcher::FOUND:
        $handler = $routeInfo[1];
        $vars = $routeInfo[2];
        call_user_func($handler, $vars);
        break;
}

?>
